GitHub — это облачная платформа для хостинга IT-проектов и совместной разработки, под капотом которой находится популярная система контроля версий Git, а также полноценная социальная сеть для разработчиков.

Здесь можно найти кучу open-source-проектов на разных языках и поучаствовать в них, разместить своё портфолио с примерами кода, чтобы приложить ссылку к резюме, подглядывать в открытых проектах интересные архитектурные решения, смотреть, как опытные разработчики пишут код, и скачивать огромное количество полезных в разработке и бесплатных инструментов для разработки. Кстати, некоторые умельцы умудряются собирать в GitHub целые библиотеки — книг и статей, а не программистские либы :)

И да, если вы недовольны какими-то фичами в любимой открытой программе и она выложена на GitHub, вы всегда можете прийти и поругаться в комментариях к проекту :) А лучше всего — оформить issue (мы расскажем, что это) и самостоятельно пофиксить проблему на радость всем пользователям. Не забывайте и благодарить авторов классных открытых проектов — донатами и просто тёплыми словами. Им будет очень приятно.

Git — это специальная программа, которая позволяет отслеживать любые изменения в файлах, хранить их версии и оперативно возвращаться в любое сохранённое состояние.
Большинство других систем контроля версий хранят информацию в виде списка изменений в файлах. Git работает иначе — он хранит скорее набор снимков — полное отображение того, как выглядит файл в момент сохранения. Это позволяет всегда иметь полную информацию обо всех файлах и быстро восстанавливать любую из предыдущих версий.

Рассмотрим, как это работает, на примере.

Есть проект, в котором пишется код. В нём создано окружение Git ― все изменения файлов отслеживаются в рамках настроенных параметров и заданных фильтров. Нужно добавить в проект новую функцию, изменив или доработав существующий код. Для этого потребуется создать внутри проекта отдельную ветку — в Git они называются branch. Работа в этой ветке никак не затрагивает основной код — если с новыми изменениями что-то пойдёт не так и код станет невалидным и перестанет запускаться, основной проект не пострадает. А когда новая функция будет дописана и протестирована, ветку можно будет «наложить» на основной код.

Также в рамках Git можно объединять разные версии кода в один. Например, над проектом трудится несколько программистов, и каждый разрабатывает или изменяет код в собственных ветках. В конце работы появится необходимость слить ветки вместе — и получается цельная программа. Это значительно облегчает совместную работу, так как не нужно ждать, пока другой разработчик допишет код, — можно работать параллельно.





1) зарегаться/зайти на github
2) создать там пустой репо
3) скопировать ее с помощью git через командный процессор на локальный компьютер
4) скопировать туда файлы с предыдущей лабы (обязательно все поместить в отдельную директорию)
5) залить это все на аккаунт в github обратно
6) Как контейнер зальется на гитхаб, еще раз повторить уже с ним все шаги, для закрепления 




ПЕРЕД ТЕМ КАК НАЧИНАТЬ ЗАЙТИ В ДИСПЕТЧЕР УЧЕТНЫХ ДАННЫХ И ПРОВЕРИТЬ ПРИВЯЗКУ К АККАУНТУ 
ВКЛАДКА УЧЕТНЫЕ ДАННЫЕ WINDOWS

ПРОВЕРИТЬ ПРИВЯЗКУ К GIT/GITHUB через команду 
1) git config --global user.name
2) git config --global user.email


В ПОМОЩЬ
git clone "ссылка на репо в гихабе"
git config --global user.email "svoyemail" (привязанный к гитхаб)
git config --global user.name "svoylogin"  (привязанный к гитхаб)
git add .
git commit -m "test"
git push
doskey /history > 2 лаба.txt

